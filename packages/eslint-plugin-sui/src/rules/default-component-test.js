/**
 * @fileoverview Detect default component test cases that haven't been customized
 */
'use strict'

const dedent = require('string-dedent')

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Detect when component test file only contains default test cases',
      recommended: true,
      url: 'https://github.mpi-internal.com/scmspain/es-td-agreements/blob/master/30-Frontend/00-agreements'
    },
    schema: [],
    messages: {
      defaultTestCase: dedent`
        This seems to be a default test case generated by the component generator.
        Please add specific test cases that validate your component's functionality.
      `,
      onlyDefaultTests: dedent`
        This test file only contains default test cases.
        Please add specific tests that validate your component's functionality.
      `
    }
  },

  create(context) {
    // Track the test cases we find
    const defaultTestCases = new Set([
      'should render without crashing',
      'should NOT render null',
      'should NOT extend classNames'
    ])

    const foundTestCases = new Set()
    let totalTestCases = 0

    function isComponentTestFile(filename) {
      return filename.includes('/components/') && filename.endsWith('.test.js')
    }

    return {
      Program(node) {
        // Reset counters for each file
        foundTestCases.clear()
        totalTestCases = 0
      },

      CallExpression(node) {
        const filename = context.getFilename()
        // Solo procesar si estamos en un archivo de test de componente
        if (!isComponentTestFile(filename)) return

        // Look for it() calls
        if (node.callee.name !== 'it') return

        const testName = node.arguments[0]?.value
        if (!testName) return

        totalTestCases++

        // Check if this is one of the default test cases
        if (defaultTestCases.has(testName)) {
          foundTestCases.add(testName)

          context.report({
            node: node.arguments[0],
            messageId: 'defaultTestCase'
          })
        }

        // After processing all tests in this block, check if they are all default ones
        if (
          totalTestCases > 0 &&
          foundTestCases.size === defaultTestCases.size &&
          [...foundTestCases].every(test => defaultTestCases.has(test))
        ) {
          context.report({
            node: node.parent,
            messageId: 'onlyDefaultTests'
          })
        }
      }
    }
  }
}
